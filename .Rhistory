programa1 <- c(rep(3,"prog1"))
programa1 <- c(rep("prog1",3))
codigo1 <- c("41","40","42","43")
codigo2 <- c("41","41","42","44")
codigo1 <- c("41","42","43")
programa1 <- c(rep("prog1",3))
programa2 <- c(rep("prog2",3))
programa3 <- c(rep("prog3",3))
df1 <- data.frame(codigo1,programa1)
df2 <- data.frame(codigo2,programa2)
df3 <- data.frame(codigo3,programa3)
codigo3 <- c("41","42","43")
df3 <- data.frame(codigo3,programa3)
View(df1)
View(df2)
codigo1
programa2 <- c(rep("prog2",4))
df2 <- data.frame(codigo2,programa2)
df3 <- data.frame(codigo3,programa3)
View(df2)
View(df3)
codigo2 <- c("40","41","42","44")
df2 <- data.frame(codigo2,programa2)
View(df2)
codigos <- c(df1$codigo1,df2$codigo2,df3$codigo3)
codigo
codigos
View(codigos)
total <- data.frame(df1,df2,df3)
df1$codigo1
a <- df1$codigo1
a <- df1$codigo1
b <- df2$codigo2
c <- df3$codigo3
codigos <- c(a,b, c)
codigos
View(df2)
a
d <- a,b
d <- a +b
codigos <- union(a,b, c)
d <- union(df1,df2,df3)
d <- union(df1,df2)
d
View(d)
a <- data.frame(c(11,12,13,15),rep("prog1",4))
a
b <- data.frame(c(10,12,13,15),rep("prog1",4))
c <- data.frame(c(12,13,15),rep("prog1",3))
a <- data.frame(c(11,12,13,14,15),rep("prog1",5))
a <- data.frame(c(11,12,13,15),rep("prog1",4))
b <- data.frame(c(10,12,13,15),rep("prog1",4))
c <- data.frame(c(12,13,15),rep("prog1",3))
d <- data.frame(c(11,12,13,14,15),rep("prog1",5))
Centros <- as.numeric(a$c.11..12..13..15.)
Centros
Centros <- Centros + as.numeric(b$c.10..12..13..15.)
Centros
Centros <- as.numeric(a$c.11..12..13..15.)
?cbind
Centros <- cbind(Centros , as.numeric(b$c.10..12..13..15.))
Centros
Centros <- as.numeric(a$c.11..12..13..15.)
Centros <- rbind(Centros , as.numeric(b$c.10..12..13..15.))
Centros
Centros <- as.numeric(a$c.11..12..13..15.)
Centros <- c(Centros , as.numeric(b$c.10..12..13..15.))
Centros
Centros <- as.numeric(a$c.11..12..13..15.)
Centros
Centros <- as.numeric(a$c.11..12..13..15.)
Centros <- c(Centros , as.numeric(b$c.10..12..13..15.),as.numeric(c$c.12..13..15.),as.numeric(d$c.11..12..13..14..15.))
Centros
unique(Centros)
Centros <- unique(Centros)
Centros
Prog1 <- rep(0,length(Centros))
Prog1 <- rep(0,length(Centros))
Prog2 <- Prog1
Prog3 <- Prog1
Prog4 <- Prog1
Prog1 <- rep("NO",length(Centros))
Prog2 <- Prog1
Prog3 <- Prog1
Prog4 <- Prog1
Final <- data.frame(Centros,Prog1,Prog2,Prog3,Prog4)
Centros[1]
Centros[5]
Centros[6]
Centros[7]
i=1
Final[1,1]
Final[1,2]
Final[2,1]
i=1
while(Centros[i]!="NA")
{
if (Final$Centros[i,1] %in% a$c.11..12..13..15.) Final$Prog1 = "SI"
if (Final$Centros[i,1] %in% b$c.10..12..13..15.) Final$Prog2 = "SI"
if (Final$Centros[i,1] %in% c$c.12..13..15.) Final$Prog3 = "SI"
if (Final$Centros[i,1] %in% d$c.11..12..13..14..15.) Final$Prog4 = "SI"
i <- i+1
}
i=1
while(Centros[i]!=NA)
{
if (Final$Centros[i,1] %in% a$c.11..12..13..15.) Final$Prog1 = "SI"
if (Final$Centros[i,1] %in% b$c.10..12..13..15.) Final$Prog2 = "SI"
if (Final$Centros[i,1] %in% c$c.12..13..15.) Final$Prog3 = "SI"
if (Final$Centros[i,1] %in% d$c.11..12..13..14..15.) Final$Prog4 = "SI"
i <- i+1
}
Centros[7]
Centros[6]
Centros[7] != NA
Centros[7] == NA
View(Final)
for (i in 1:length(Final$Centros)
{
if (Final$Centros[i,1] %in% a$c.11..12..13..15.) Final$Prog1 = "SI"
if (Final$Centros[i,1] %in% b$c.10..12..13..15.) Final$Prog2 = "SI"
for (i in 1:length(Final$Centros))
{
if (Final$Centros[i,1] %in% a$c.11..12..13..15.) Final$Prog1 = "SI"
if (Final$Centros[i,1] %in% b$c.10..12..13..15.) Final$Prog2 = "SI"
if (Final$Centros[i,1] %in% c$c.12..13..15.) Final$Prog3 = "SI"
if (Final$Centros[i,1] %in% d$c.11..12..13..14..15.) Final$Prog4 = "SI"
}
if (Final$Centros[i,1] %in% a$c.11..12..13..15.) Final$Prog1 = "SI"
Final$Centros[length(Final$Centros),1]
length(Final$Centros)
for (i in 1:length(Final$Centros))
{
if (Final$Centros[i] %in% a$c.11..12..13..15.) Final$Prog1 = "SI"
if (Final$Centros[i] %in% b$c.10..12..13..15.) Final$Prog2 = "SI"
if (Final$Centros[i] %in% c$c.12..13..15.) Final$Prog3 = "SI"
if (Final$Centros[i] %in% d$c.11..12..13..14..15.) Final$Prog4 = "SI"
}
length(Final$Centros)
Final
Final$Centros[5]
Final$Centros[5] %in% a$c.11..12..13..15.
Prog1 <- rep("NO",length(Centros))
Prog2 <- Prog1
Prog3 <- Prog1
Prog4 <- Prog1
Final <- data.frame(Centros,Prog1,Prog2,Prog3,Prog4)
View(Final)
# Comprobamos cuando cada centro está en un programa
for (i in 1:length(Final$Centros))
{
if (Final$Centros[i] %in% a$c.11..12..13..15.) Final$Prog1 = "SI"
if (Final$Centros[i] %in% b$c.10..12..13..15.) Final$Prog2 = "SI"
if (Final$Centros[i] %in% c$c.12..13..15.) Final$Prog3 = "SI"
if (Final$Centros[i] %in% d$c.11..12..13..14..15.) Final$Prog4 = "SI"
}
View(Final)
Prog1 <- rep("NO",length(Centros))
Prog2 <- Prog1
Prog3 <- Prog1
Prog4 <- Prog1
Final <- data.frame(Centros,Prog1,Prog2,Prog3,Prog4)
# Comprobamos cuando cada centro está en un programa
for (i in 1:length(Final$Centros))
{
if (Final$Centros[i] %in% a$c.11..12..13..15.) {Final$Prog1 = "SI"}
if (Final$Centros[i] %in% b$c.10..12..13..15.) {Final$Prog2 = "SI"}
if (Final$Centros[i] %in% c$c.12..13..15.) {Final$Prog3 = "SI"}
if (Final$Centros[i] %in% d$c.11..12..13..14..15.) {Final$Prog4 = "SI"}
}
View(Final)
Final$Centros[1] %in% a$c.11..12..13..15.
Prog1 <- rep("NO",length(Centros))
Prog2 <- Prog1
Prog3 <- Prog1
Prog4 <- Prog1
Final <- data.frame(Centros,Prog1,Prog2,Prog3,Prog4)
for (i in 1:length(Final$Centros))
{
if (as.numeric(Final$Centros[i]) %in% as.numeric(a$c.11..12..13..15.)) {Final$Prog1 = "SI"}
if (as.numeric(Final$Centros[i]) %in% as.numeric(b$c.10..12..13..15.)) {Final$Prog2 = "SI"}
if (as.numeric(Final$Centros[i]) %in% as.numeric(c$c.12..13..15.)) {Final$Prog3 = "SI"}
if (as.numeric(Final$Centros[i]) %in% as.numeric(d$c.11..12..13..14..15.)) {Final$Prog4 = "SI"}
}
View(Final)
Final$Centros[1] %in% a$c.11..12..13..15.
Final$Centros[1] %in% b$c.10..12..13..15.
for (i in 1:length(Final$Centros))
{
if (as.numeric(Final$Centros[i]) %in% as.numeric(a$c.11..12..13..15.)) {Final$Prog1 = "SI"} else {Final$Prog1="NO"}
}
View(Final)
for (i in 1:length(Final$Centros))
{
if (as.numeric(Final$Centros[i]) %in% as.numeric(a$c.11..12..13..15.)) {Final$Prog1 = "SI"} else {Final$Prog1="NO"}
if (as.numeric(Final$Centros[i]) %in% as.numeric(b$c.10..12..13..15.)) {Final$Prog2 = "SI"} else {Final$Prog2="NO"}
if (as.numeric(Final$Centros[i]) %in% as.numeric(c$c.12..13..15.)) {Final$Prog3 = "SI"} else {Final$Prog3="NO"}
if (as.numeric(Final$Centros[i]) %in% as.numeric(d$c.11..12..13..14..15.)) {Final$Prog4 = "SI"} else {Final$Prog4="NO"}
}
View(Final)
Prog1 <- rep("NO",length(Centros))
Prog2 <- Prog1
Prog3 <- Prog1
Prog4 <- Prog1
Final <- data.frame(Centros,Prog1,Prog2,Prog3,Prog4)
View(Final)
for (i in 1:length(Final$Centros))
{
if (as.numeric(Final$Centros[i]) %in% as.numeric(a$c.11..12..13..15.)) {Final$Prog1[i] = "SI"} else {Final$Prog1[i]="NO"}
if (as.numeric(Final$Centros[i]) %in% as.numeric(b$c.10..12..13..15.)) {Final$Prog2[i] = "SI"} else {Final$Prog2[i]="NO"}
if (as.numeric(Final$Centros[i]) %in% as.numeric(c$c.12..13..15.)) {Final$Prog3[i] = "SI"} else {Final$Prog3[i]="NO"}
if (as.numeric(Final$Centros[i]) %in% as.numeric(d$c.11..12..13..14..15.)) {Final$Prog4[i] = "SI"} else {Final$Prog4[i]="NO"}
}
View(Final)
Prog1 <- rep("NO",length(Centros))
Prog2 <- Prog1
Prog3 <- Prog1
Prog4 <- Prog1
Final <- data.frame(Centros,Prog1,Prog2,Prog3,Prog4)
Final$Prog1[1]
Final$Prog1
if (as.numeric(Final$Centros[i]) %in% as.numeric(a$c.11..12..13..15.)) {Final$Prog1[i] = "SI"} else {Final$Prog1[i]="NO"}
if (as.numeric(Final$Centros[1]) %in% as.numeric(a$c.11..12..13..15.)) {Final$Prog1[1] = "SI"} else {Final$Prog1[1]="NO"}
str(Final)
if (as.numeric(Final$Centros[1]) %in% as.numeric(a$c.11..12..13..15.)) {Final$Prog1[1] = SI} else {Final$Prog1[1]=NO}
if (as.numeric(Final$Centros[1]) %in% as.numeric(a$c.11..12..13..15.)) {Final$Prog1[1] = "SI"} else {Final$Prog1[1]="NO"}
warnings()
?data.frame
Final <- data.frame(Centros,Prog1,Prog2,Prog3,Prog4, stringsAsFactors = FALSE)
if (as.numeric(Final$Centros[1]) %in% as.numeric(a$c.11..12..13..15.)) {Final$Prog1[1] = "SI"} else {Final$Prog1[1]="NO"}
View(Final)
for (i in 1:length(Final$Centros))
{
if (as.numeric(Final$Centros[i]) %in% as.numeric(a$c.11..12..13..15.)) {Final$Prog1[i] = "SI"} else {Final$Prog1[i]="NO"}
if (as.numeric(Final$Centros[i]) %in% as.numeric(b$c.10..12..13..15.)) {Final$Prog2[i] = "SI"} else {Final$Prog2[i]="NO"}
if (as.numeric(Final$Centros[i]) %in% as.numeric(c$c.12..13..15.)) {Final$Prog3[i] = "SI"} else {Final$Prog3[i]="NO"}
if (as.numeric(Final$Centros[i]) %in% as.numeric(d$c.11..12..13..14..15.)) {Final$Prog4[i] = "SI"} else {Final$Prog4[i]="NO"}
}
View(Final)
library(psych) # This activates the R package8 ‘psych’ (Revelle, 2011) for the
install.packages("psych")
library(psych) # This activates the R package8 ‘psych’ (Revelle, 2011) for the
data(bfi) # This loads the dataset bfi contained in the R package psych.
View(bfi)
attach(bfi) # This attaches the dataset bfi to the current session in R.
bfi5items<-data.frame(N1,N2,N3,N4,N5) # This creates a new dataset, labeled bfi5items, containing only five
View(bfi5items)
describe(bfi5items) # This describes the dataset bfi5items, providing descriptives, such
bfi5items # This displays the object/dataset called bfi5items.
polychoric(bfi5items) # This provides the polychoric correlation matrix for the dataset
cor(bfi5items, y=NULL,
use="complete.obs", method=c("pearson”))
cov(bfi5items, y=NULL,
use="complete.obs", method=c("pearson”))
cor(bfi5items, y=NULL, use="complete.obs", method=c("pearson”))
)
)
q
))))))
cov(bfi5items, y=NULL,
use="complete.obs", method=c("pearson”))
?cor
cor(bfi5items,y=NULL, use="complete.obs",method=c("pearson"))
cov(bfi5items, y=NULL, use="complete.obs", method=c("pearson”))
skew(bfi5items) # This provides the skewness for all items in the bfi5items dataset.
cor(bfi5items,y=NULL, use="complete.obs",method=c("pearson"))
cov(bfi5items,y=NULL,use="complete.obs",method = c("pearson"))
skew(bfi5items) # This provides the skewness for all items in the bfi5items dataset.
kurtosi(bfi5items) # This provides the kurtosis9 for all items in the bfi5items dataset.
scree(bfi5items) # This provides the scree plots of the eigenvalues for a factor
examplename<-polychoric(bfi5items) # This saves the polychoric correlation matrix, and current session in R.
View(examplename)
examplename
alpha(examplename$rho)
alpha(bfi5items) # This provides raw/Cronbach’s and standardized alpha of the
fa(bfi5items) # This provides the factor loadings (MR1), communalities (h2),
fa(examplename$rho) # This provides the factor loadings (MR1), communalities (h2),
guttman(examplename$rho) # This provides alternative estimates of reliability for the data
guttman(examplename$rho)
install.packages("GPArotation")
guttman(examplename$rho)
guttman(bfi5items) # Equivalent to the command above, this provides a list of
omega(examplename$rho) # This provides the ordinal versions of the reliability coefficients
omega(bfi5items) # This provides omega coefficients for the data matrix bfi5items.
alpha(bfi5items)
alpha(bfi5items)
library(RgoogleMaps)
lat <- c(36.2,37.7) #define our map's ylim
lon <- c(-10,1) #define our map's xlim
center = c(mean(lat), mean(lon))  #tell what point to center on
# zoom <- 7#zoom: 1 = furthest out (entire globe), larger numbers = closer in 6
zoom <- 7 #MaxZoom(lat,lon, size = c(640,640))
terrmap <- GetMap(center=center, zoom=zoom, maptype= "roadmap", destfile = "mobile.png") #lots of visual options, just like google maps: maptype = c("roadmap", "mobile", "satellite", "terrain", "hybrid", "mapmaker-roadmap", "mapmaker-hybrid")
?PlotOnStaticMap
PlotOnStaticMap(terrmap,lat = 36.8,lon = -5)
PlotOnStaticMap(terrmap,lat = 36.8,lon = -5,cex=1.5,pch=20,col="red")
?PlotPolysOnStaticMap
library(RgoogleMaps)
lat <- c(36.2,37.7) #define our map's ylim
lon <- c(-10,1) #define our map's xlim
center = c(mean(lat), mean(lon))  #tell what point to center on
# zoom <- 7#zoom: 1 = furthest out (entire globe), larger numbers = closer in 6
zoom <- 7 #MaxZoom(lat,lon, size = c(640,640))
terrmap <- GetMap(center=center, zoom=zoom, maptype= "hybrid", destfile = "hybrid.png") #lots of visual options, just like google maps: maptype = c("roadmap", "mobile", "satellite", "terrain", "hybrid", "mapmaker-roadmap", "mapmaker-hybrid")
# Ahora ponemos marcas
PlotOnStaticMap(terrmap,lat = 36.8,lon = -5,cex=1.5,pch=20,col="red", destfile = "Mi_Mapa.png")
terrmap <- GetMap(center=center, zoom=zoom, maptype= "mapmaker-roadmap") #lots of visual options, just like google maps: maptype = c("roadmap", "mobile", "satellite", "terrain", "hybrid", "mapmaker-roadmap", "mapmaker-hybrid")
# Ahora ponemos marcas
PlotOnStaticMap(terrmap,lat = 36.8,lon = -5,cex=1.5,pch=20,col="red", destfile = "Mi_Mapa.png")
Train <- read.csv("../FaceRep_Manual/Data//training.csv")
setwd("~/Personal/GITHUB//FaceRec/")
Train <- read.csv("../FaceRep_Manual/Data//training.csv")
str(Train)
str(Train$Image)
Train_Images <- as.numeric(Train$Image)
str(Train_Images)
Train_Images[1,2]
dim(Train_Images)
is.list(Train_Images)
??display
?print
setwd("~/Personal/GITHUB//FaceRec/")
# Cargar los dos data frame
Train <- read.csv("../FaceRep_Manual/Data//training.csv")
Train_Images <- as.numeric(Train$Image)
save(Train_Images,file="../FaceRep_Manual/Data/Imagenes.RData")
Train_Images <. read.csv("../FaceRep_Manual/Data//Imagenes.RData")
Train_Images <- read.csv("../FaceRep_Manual/Data//Imagenes.RData")
save(Train_Images,file="../FaceRep_Manual/Data/Imagenes.csv")
Train_Images <- read.csv("../FaceRep_Manual/Data//Imagenes.csv")
Train_Images <- as.numeric(Train$Image)
str(Train_Images)
str(Train_Images[1])
str(Train$Image)
m <- matrix(Train_Images[5],96,96)
image(m)
m
m <- matrix(Train$Image[5],96,96)
image(m)
Train$Image[5]
m <- matrix(Train$Image[5],96,96)
image(m)
m <- matrix(as.numeric(Train$Image[5]),96,96)
image(m)
image(m, axes = FALSE, col = grey(seq(0, 1, length = 256)))
is.matrix(m)
str(m)
?matrix
96*96
str(Train$Image[5])
sqrt(6494)
sqrt(6495)
sqrt(6493)
sqrt(1301)
sqrt(1300)
str(Train)
Train_Images[1]
Train$Image[1,31]
Train[1,31]
Imagenes_Train <- as.integer(unlist(strsplit(Train$Image, " ")))
Train <- read.csv("../FaceRep_Manual/Data//training.csv",stringsAsFactors=F))
Train <- read.csv("../FaceRep_Manual/Data//training.csv",stringsAsFactors=F)
setwd("~/Personal/GITHUB//FaceRec/")
Train <- read.csv("../DATA_FaceRec//Data/training.csv",stringsAsFactors=F)
Imagenes_Train <- as.integer(unlist(strsplit(Train$Image, " ")))
str(Imagenes_Train[5])
96*96
12*12
sqrt(240)
str(Imagenes_Train)
?unlist()
m <- matrix(Train_Images[5],96,96)
m <- matrix(Imagenes_Train[5],96,96)
image(m)
Imagenes_Train_1 <- as.integer(unlist(strsplit(Train$Image[1], " ")))
str(Imagenes_Train_1)
96*96
m <- matrix(Imagenes_Train_1,96,96)
image(m)
image(1:96, 1:96, m, col=gray((0:255)/255))
?image()
?t()
image(1:96,1:96,t(m),col=gray((0:255)/255))
image(1:96,1:96,m,col=gray((0:255)/255))
?rev()
image(1:96,1:96,rev(m),col=gray((0:255)/255))
m <- matrix(rev(Imagenes_Train_1),96,96)
# Para ver las imagenes una a una  la ponemos en blanco y negro
image(1:96,1:96,rev(m),col=gray((0:255)/255))
image(1:96,1:96,m,col=gray((0:255)/255))
?point()
?plot
View(Train[1])
View(Train[1,])
point(Train[1,1],Train[1,2])
points(Train[1,1],Train[1,2])
points(96-Train[1,1],96-Train[1,2])
points(96-Train$nose_tip_x,96[1]-Train$nose_tip_y[1])
points(96-Train[1,1],96-Train[1,2], col = "red", pch=19)
points(96-Train$left_eye_center_x[1],96-Train[1,2], col = "red", pch=19)
points(96-Train$left_eye_center_x[1],96-Train$left_eye_center_y[1], col = "red", pch=19)
points(96-Train$left_eye_center_x[1],96-Train$nose_tip_y[1], col = "red", pch=19)
points(96-Train$nose_tip_x[1],96-Train$nose_tip_y[1], col = "red", pch=19)
for (i in 1:(length(Train[1,])-1){
for (i in 1:(length(Train[1,])-1)){
points(96-Train[1,i],96-Train[1,i+1], col = "blue", pch = 19)
i <- i+1
}
for (i in 1:(ncol(Train)-1)){
points(96-Train[1,i],96-Train[1,i+1], col = "green", pch = 19)
i <- i+1
}
summary(Train$left_eye_center_x)
96*96
ncol(Train)
for (i in 1:(ncol(Train)-2)){
points(96-Train[1,i],96-Train[1,i+1], col = "green", pch = 19)
i <- i+1
}
for (i in 1:(ncol(Train)-2)){
points(96-Train[1,i],96-Train[1,i+1], col = "blue", pch = 19)
i <- i+1
}
str(Train)
points(40,col="red")
points(40,40,col="red")
Train <- read.csv("../DATA_FaceRec//Data/training.csv",stringsAsFactors=F)
Imagenes_Train_1 <- as.integer(unlist(strsplit(Train$Image[1], " ")))
# Para convertirlas en imagenes debemos crear una matriz de 96 * 96 y previamente tenemos que revertir la matriz, poner el primer número al final, el segundo el penúltimo,... y
m <- matrix(rev(Imagenes_Train_1),96,96)
# Para ver las imagenes una a una  la ponemos en blanco y negro
image(1:96,1:96,m,col=gray((0:255)/255))
for (i in 1:(ncol(Train)-2)){
points(96-Train[1,i],96-Train[1,i+1], col = "blue", pch = 19)
i <- i+2
}
ncol(Train)-2
i
i <- 1
points(96-Train[1,i],96-Train[1,i+1], col = "red", pch = 19)
i <- i+2
points(96-Train[1,i],96-Train[1,i+1], col = "red", pch = 19)
i <- i+2
points(96-Train[1,i],96-Train[1,i+1], col = "red", pch = 19)
i <- i+2
points(96-Train[1,i],96-Train[1,i+1], col = "red", pch = 19)
i <- i+2
points(96-Train[1,i],96-Train[1,i+1], col = "red", pch = 19)
i <- i+2
points(96-Train[1,i],96-Train[1,i+1], col = "red", pch = 19)
i <- i+2
i
points(96-Train[1,i],96-Train[1,i+1], col = "red", pch = 19)
i <- i+2
points(96-Train[1,i],96-Train[1,i+1], col = "red", pch = 19)
i <- i+2
points(96-Train[1,i],96-Train[1,i+1], col = "red", pch = 19)
i <- i+2
points(96-Train[1,i],96-Train[1,i+1], col = "red", pch = 19)
i <- i+2
points(96-Train[1,i],96-Train[1,i+1], col = "red", pch = 19)
i <- i+2
i
points(96-Train[1,i],96-Train[1,i+1], col = "red", pch = 19)
i <- i+2
points(96-Train[1,i],96-Train[1,i+1], col = "red", pch = 19)
i <- i+2
i
points(96-Train[1,i],96-Train[1,i+1], col = "red", pch = 19)
i <- i+2
i
for (i in 1:(ncol(Train)-2)){
points(96-Train[1,i],96-Train[1,i+1], col = "green", pch = 19)
i <- i+2
}
i
?seq
image(1:96,1:96,m,col=gray((0:255)/255))
# Podemos ahora marcar los puntos de esta imagen con:
for (i in seq(from = 1, to = (ncol(Train)-2) ,by =2){
for (i in seq(from = 1, to = (ncol(Train)-2) ,by =2)){
points(96-Train[1,i],96-Train[1,i+1], col = "green", pch = 19)
}
lapply(Train, function(x) points(96-Train[1,i],96-Train[1,i+1], col = "red", pch = 19)
)
apply(Train, function(x) points(96-Train[1,i],96-Train[1,i+1], col = "red", pch = 19))
apply(Train, FUN = function(x) points(96-Train[1,i],96-Train[1,i+1], col = "red", pch = 19))
tapply(Train, FUN = function(x) points(96-Train[1,i],96-Train[1,i+1], col = "red", pch = 19))
par <- seq(1,30,2)
par
valor <- seq(from = 1, to = (ncol(Train)-2) ,by =2)
valor
apply(valor, FUN= points(96-Train[1,valor],96-Train[1,valor+1], col = "blue", pch = 19) )
?apply
?lapply
lapply(valor, FUN= points(96-Train[1,valor],96-Train[1,valor+1], col = "blue", pch = 19) )
?vapply
lapply(valor, FUN= points(96-Train[1,valor],96-Train[1,valor+1], col = "blue", pch = 19) )
lapply(valor, function(x,y) points(96-y[1,x],96-y[1,x+1], col = "green", pch = 19), y=Train )
indice <- seq(from = 1, to = (ncol(Train)-2) ,by =2)
a <- lapply(indice, function(x,y) points(96-y[1,x],96-y[1,x+1], col = "blue", pch = 19), y=Train )
# La ultima columna de Train es una imagen, la grabamos aparte, separando cada texto en números enteros
# La ultima columna de Train es una imagen, la grabamos aparte, separando cada texto en números enteros
num_imagen <- 2
Imagen_Train <- as.integer(unlist(strsplit(Train$Image[num_imagen, " ")))
num_imagen <- 1
num_imagen <- 2
Imagen_Train <- as.integer(unlist(strsplit(Train$Image[num_imagen], " ")))
m <- matrix(rev(Imagen_Train),96,96)
image(1:96,1:96,m,col=gray((0:255)/255))
a <- lapply(indice, function(x,y) points(96-y[num_imagen,x],96-y[num_imagen,x+1], col = "blue", pch = 19), y=Train )
lapply(indice, function(x,y) points(96-y[num_imagen,x],96-y[num_imagen,x+1], col = "blue", pch = 19), y=Train )
